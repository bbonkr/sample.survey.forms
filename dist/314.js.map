{"version":3,"sources":["webpack://sample.surver.forms/./src/components/SurveyForm/SurveyAnswer.tsx","webpack://sample.surver.forms/./src/components/SurveyForm/SurveyQuestion.tsx","webpack://sample.surver.forms/./src/components/SurveyForm/SurveyFormItem.tsx","webpack://sample.surver.forms/./src/components/SurveyForm/style.css?9611","webpack://sample.surver.forms/./src/components/SurveyForm/SurveyForm.tsx","webpack://sample.surver.forms/./src/components/SurveyForm/style.css"],"names":["SurveyAnswer","record","onChange","id","uuidv4","displayOrder","inputs","useState","answerValues","setAnswerValues","controlIds","setControlIds","handleChange","index","e","value","currentTarget","type","checked","prevState","temp","splice","handleClickRemoveAnswer","useEffect","filter","Boolean","map","x","className","controlType","controlSource","split","radio","key","name","checkbox","find","controlId","placeholder","required","isRequired","onClick","isMultiple","length","SurveyQuestion","answers","questionAndAnswers","setQuestionAndAnswers","useCallback","values","prevSate","question","SurveyFormItem","surveyResult","setSurveyResult","questionIndex","questions","findIndex","previousQuestion","title","sort","a","b","JSON","stringify","SurveyForm","setRecord","Axios","then","res","_","data","err","console","error","___CSS_LOADER_EXPORT___","push","module"],"mappings":"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","file":"314.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { ControlTypes, Question } from '../../models';\nimport { v4 as uuidv4 } from 'uuid';\n\ninterface SurveyAnswerProps {\n    record: Question;\n    onChange?: (_values: string[]) => void;\n}\n\nexport const SurveyAnswer = ({ record, onChange }: SurveyAnswerProps) => {\n    const id = `${uuidv4()}-${record.displayOrder}`;\n    const inputs: ControlTypes[] = ['Textbox', 'Datepicker'];\n\n    const [answerValues, setAnswerValues] = useState<string[]>(['']);\n    const [controlIds, setControlIds] = useState<string[]>([id]);\n\n    const handleChange =\n        (index: number) => (e: React.ChangeEvent<HTMLInputElement>) => {\n            let value = e.currentTarget.value;\n\n            // console.info('onchange');\n\n            if (\n                e.currentTarget.type === 'checkbox' ||\n                e.currentTarget.type === 'radio'\n            ) {\n                value = e.currentTarget.checked ? value : '';\n            }\n\n            setAnswerValues((prevState) => {\n                const temp = [...prevState];\n                temp.splice(index, 1, value);\n\n                return temp;\n            });\n        };\n\n    const handleClickAddMoreAnswer = () => {\n        setAnswerValues((prevState) => [...prevState, '']);\n        setControlIds((prevState) => [\n            ...prevState,\n            `${id}-${prevState.length + 1}`,\n        ]);\n    };\n\n    const handleClickRemoveAnswer = (index: number) => () => {\n        // console.info('handleClickRemoveAnswer', index);\n        setAnswerValues((prevState) => {\n            const temp = [...prevState];\n            temp.splice(index, 1);\n            return temp;\n        });\n        setControlIds((prevState) => {\n            const temp = [...prevState];\n            temp.splice(index, 1);\n            return temp;\n        });\n    };\n\n    useEffect(() => {\n        // console.info(`${record.id}`, answerValues);\n        if (onChange) {\n            onChange(answerValues.filter(Boolean).map((x) => x));\n        }\n    }, [answerValues]);\n\n    return (\n        <div className=\"answer-container\">\n            <div className={`answers`}>\n                {(record.controlType === 'RadioList' ||\n                    record.controlType === 'CheckBoxList') && (\n                    <div>\n                        {record.controlSource &&\n                            record.controlSource.split(',').map((radio) => {\n                                return (\n                                    <label key={radio}>\n                                        <input\n                                            type={\n                                                record.controlType ===\n                                                'RadioList'\n                                                    ? 'radio'\n                                                    : 'check'\n                                            }\n                                            name={id}\n                                            value={radio}\n                                            onChange={handleChange(0)}\n                                        />{' '}\n                                        {radio}\n                                    </label>\n                                );\n                            })}\n                    </div>\n                )}\n\n                {record.controlType === 'CheckBoxList' && (\n                    <div>\n                        {record.controlSource &&\n                            record.controlSource\n                                .split(',')\n                                .map((checkbox, index) => {\n                                    return (\n                                        <label key={checkbox}>\n                                            <input\n                                                type=\"check\"\n                                                value={checkbox}\n                                                onChange={handleChange(index)}\n                                            />{' '}\n                                            {checkbox}\n                                        </label>\n                                    );\n                                })}\n                    </div>\n                )}\n\n                {record.controlType === 'Textbox' &&\n                    inputs.find((x) => x === record.controlType) &&\n                    controlIds?.map((controlId, index) => {\n                        return (\n                            <div key={controlId}>\n                                <input\n                                    id={controlId}\n                                    name={controlId}\n                                    type=\"text\"\n                                    placeholder={record.placeholder}\n                                    value={answerValues[index]}\n                                    onChange={handleChange(index)}\n                                    required={record.isRequired}\n                                />\n                                {index > 0 && (\n                                    <button\n                                        onClick={handleClickRemoveAnswer(index)}\n                                    >\n                                        Remove\n                                    </button>\n                                )}\n                            </div>\n                        );\n                    })}\n\n                {record.controlType === 'Datepicker' &&\n                    inputs.find((x) => x === record.controlType) &&\n                    controlIds?.map((controlId, index) => {\n                        return (\n                            <div key={controlId}>\n                                <input\n                                    id={controlId}\n                                    name={controlId}\n                                    type=\"date\"\n                                    placeholder={record.placeholder}\n                                    value={answerValues[index]}\n                                    onChange={handleChange(index)}\n                                    required={record.isRequired}\n                                />\n                                {index > 0 && (\n                                    <button\n                                        onClick={handleClickRemoveAnswer(index)}\n                                    >\n                                        Remove\n                                    </button>\n                                )}\n                            </div>\n                        );\n                    })}\n            </div>\n\n            {record.isMultiple && (\n                <div>\n                    <button onClick={handleClickAddMoreAnswer}>\n                        Add more answer\n                    </button>\n                </div>\n            )}\n        </div>\n    );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { Question } from '../../models';\nimport { SurveyAnswer } from './SurveyAnswer';\n\ninterface SurveyQuestionProps {\n    record: Question;\n    onChange?: (_id: number, _value: Question) => void;\n}\n\nexport const SurveyQuestion = ({ record, onChange }: SurveyQuestionProps) => {\n    const [questionAndAnswers, setQuestionAndAnswers] = useState<Question>(\n        () => ({\n            ...record,\n            answers: [...(record.answers ?? [])],\n        }),\n    );\n\n    const handleChange = useCallback((values: string[]) => {\n        setQuestionAndAnswers((prevSate) => {\n            return {\n                ...prevSate,\n                answers: [...values],\n            };\n        });\n    }, []);\n\n    useEffect(() => {\n        // console.info(\n        //     'SuveyQuestion: questionAndAnswers => ',\n        //     questionAndAnswers,\n        // );\n\n        if (onChange) {\n            onChange(record.displayOrder, questionAndAnswers);\n        }\n    }, [questionAndAnswers]);\n\n    return (\n        <div>\n            <h3>{record.question}</h3>\n            <div className=\"is-flex is-flex-direction-row answers-container\">\n                <div>\n                    <SurveyAnswer\n                        key={questionAndAnswers.displayOrder}\n                        record={questionAndAnswers}\n                        onChange={handleChange}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { Survey, Question } from '../../models';\nimport { SurveyQuestion } from './SurveyQuestion';\n\ninterface SurveyFormItemProps {\n    record: Survey;\n}\n\nexport const SurveyFormItem = ({ record }: SurveyFormItemProps) => {\n    const [surveyResult, setSurveyResult] = useState<Survey>(() => ({\n        ...record,\n    }));\n\n    const handleClickSubmit = () => {\n        console.info('submit');\n    };\n\n    const handleChange = useCallback(\n        (displayOrder: number, value: Question) => {\n            setSurveyResult((prevState) => {\n                const questionIndex = prevState.questions.findIndex(\n                    (x) => x.displayOrder === displayOrder,\n                );\n                if (questionIndex >= 0) {\n                    const previousQuestion = prevState.questions.find(\n                        (x) => x.displayOrder === displayOrder,\n                    );\n                    if (previousQuestion) {\n                        prevState.questions.splice(questionIndex, 1, {\n                            ...previousQuestion,\n                            ...value,\n                        });\n                    }\n                }\n\n                return {\n                    ...prevState,\n                    questions: [...prevState.questions],\n                };\n            });\n        },\n        [],\n    );\n\n    useEffect(() => {\n        console.info('SurveyFormItem : surveyResult => ', surveyResult);\n    }, [surveyResult]);\n\n    return (\n        <div>\n            <h2>{record.title}</h2>\n\n            {record.questions\n                .sort((a, b) => (a.displayOrder > b.displayOrder ? 1 : -1))\n                .map((question) => (\n                    <SurveyQuestion\n                        key={question.displayOrder}\n                        record={question}\n                        onChange={handleChange}\n                    />\n                ))}\n\n            <div>\n                <button onClick={handleClickSubmit}>Submit</button>\n            </div>\n\n            <div>\n                <h2>Result data:</h2>\n                {surveyResult && (\n                    <pre>{JSON.stringify(surveyResult, null, 4)}</pre>\n                )}\n            </div>\n        </div>\n    );\n};\n","import api from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../node_modules/css-loader/dist/cjs.js!./style.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import React, { useEffect, useState } from 'react';\nimport Axios from 'axios';\nimport { Survey } from '../../models';\nimport { SurveyFormItem } from './SurveyFormItem';\n\nimport './style.css';\n\nexport const SurveyForm = () => {\n    const [record, setRecord] = useState<Survey>();\n\n    useEffect(() => {\n        Axios.get<Survey>(\n            'https://raw.githubusercontent.com/bbonkr/sample.survey.forms/main/sample/sample.json',\n        )\n            .then((res) => {\n                setRecord((_) => res.data);\n            })\n            .catch((err) => {\n                console.error(err);\n            });\n    }, []);\n\n    return <div>{record && <SurveyFormItem record={record} />}</div>;\n};\n\nexport default SurveyForm;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".is-flex {\\n    display: flex;\\n\\n}\\n\\n.is-flex-direction-column {\\n    flex-direction: column;\\n}\\n\\n.is-flex-direction-row {\\n    flex-direction: row;\\n}\\n\\n.answers-container>div {\\n    background-color: #e1e1e1;\\n    padding: 0.6rem;\\n    flex: 1;\\n}\\n\\n.answers-container>div:not(:last-child) {\\n    margin-right: 1rem;\\n}\\n\\n.answers-container>div .help {\\n    font-size: small;\\n    color: #afafaf;\\n    padding: 0.3rem;\\n}\\n\\n.answer-container:not(:last-child) {\\n    margin-bottom: 0.6rem;\\n}\\n\\n.answers {\\n    display: flex;\\n    flex-direction: column;\\n}\\n\\n.answer-container input:invalid:required {\\n    border: 2px solid red;\\n}\\n\\n.answer-container input:required {\\n    border: 2px solid orange;\\n}\\n\\n.answer-container input:valid:required {\\n    border: 2px solid greenyellow;\\n}\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/components/SurveyForm/style.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,aAAa;;AAEjB;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,yBAAyB;IACzB,eAAe;IACf,OAAO;AACX;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,gBAAgB;IAChB,cAAc;IACd,eAAe;AACnB;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,wBAAwB;AAC5B;;AAEA;IACI,6BAA6B;AACjC\",\"sourcesContent\":[\".is-flex {\\n    display: flex;\\n\\n}\\n\\n.is-flex-direction-column {\\n    flex-direction: column;\\n}\\n\\n.is-flex-direction-row {\\n    flex-direction: row;\\n}\\n\\n.answers-container>div {\\n    background-color: #e1e1e1;\\n    padding: 0.6rem;\\n    flex: 1;\\n}\\n\\n.answers-container>div:not(:last-child) {\\n    margin-right: 1rem;\\n}\\n\\n.answers-container>div .help {\\n    font-size: small;\\n    color: #afafaf;\\n    padding: 0.3rem;\\n}\\n\\n.answer-container:not(:last-child) {\\n    margin-bottom: 0.6rem;\\n}\\n\\n.answers {\\n    display: flex;\\n    flex-direction: column;\\n}\\n\\n.answer-container input:invalid:required {\\n    border: 2px solid red;\\n}\\n\\n.answer-container input:required {\\n    border: 2px solid orange;\\n}\\n\\n.answer-container input:valid:required {\\n    border: 2px solid greenyellow;\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n"],"sourceRoot":""}